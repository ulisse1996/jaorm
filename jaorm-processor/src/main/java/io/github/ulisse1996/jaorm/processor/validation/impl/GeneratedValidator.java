package io.github.ulisse1996.jaorm.processor.validation.impl;

import io.github.ulisse1996.jaorm.annotation.*;
import io.github.ulisse1996.jaorm.processor.exception.ProcessorException;
import io.github.ulisse1996.jaorm.processor.util.ProcessorUtils;
import io.github.ulisse1996.jaorm.processor.validation.Validator;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.MirroredTypeException;
import javax.lang.model.type.PrimitiveType;
import javax.lang.model.type.TypeMirror;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

public class GeneratedValidator extends Validator {

    public GeneratedValidator(ProcessingEnvironment processingEnvironment) {
        super(processingEnvironment);
    }

    @Override
    public void validate(List<? extends Element> annotated) {
        annotated.forEach(e -> {
            if (e.getAnnotation(TableGenerated.class) != null) {
                checkTableGenerated(e);
            } else {
                checkCustomGenerated(e);
            }
        });
    }

    private void checkCustomGenerated(Element element) {
        checkElement(element);
        CustomGenerated customGenerated = element.getAnnotation(CustomGenerated.class);
        TypeElement fieldType = ProcessorUtils.getFieldType(processingEnvironment, (VariableElement) element);
        TypeMirror mirror = null;
        try {
            processingEnvironment.getElementUtils().getTypeElement(customGenerated.value().getName()).asType();
        } catch (MirroredTypeException ex) {
            mirror = ex.getTypeMirror();
        }
        TypeElement typeElement = ProcessorUtils.getGenericTypes(processingEnvironment, mirror, CustomGenerator.class.getName()).get(0);
        PrimitiveType unboxed = ProcessorUtils.getUnboxed(processingEnvironment, typeElement);
        if (Stream.of(typeElement, unboxed).filter(Objects::nonNull).noneMatch(fieldType::equals)) {
            throw new ProcessorException("Mismatch between field type and generated type !");
        }
    }

    private void checkElement(Element element) {
        Column column = element.getAnnotation(Column.class);
        Id id = element.getAnnotation(Id.class);
        if (column == null && id == null) {
            throw new ProcessorException("Missing @Column or @Id on field annotated with @TableGenerated");
        }

        if (id != null && !id.autoGenerated()) {
            throw new ProcessorException("@Id annotated with @TableGenerated but not marked as autoGenerated()");
        } else if (column != null && !column.autoGenerated() && id == null) {
            throw new ProcessorException("@Column annotated with @TableGenerated but not marked as autoGenerated()");
        }
    }

    private void checkTableGenerated(Element e) {
        checkElement(e);
    }
}
