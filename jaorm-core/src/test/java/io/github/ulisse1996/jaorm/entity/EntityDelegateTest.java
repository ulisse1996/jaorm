package io.github.ulisse1996.jaorm.entity;

import io.github.ulisse1996.jaorm.DelegatesMock;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
class EntityDelegateTest {

    @Mock private EntityDelegate<Object> testSubject;
    @Mock private ColumnSetter<Object, Object> notKey;
    @Mock private ColumnSetter<Object, Object> key;

    @Test
    void should_set_auto_generated_keys() {
        EntityMapper<Object> mapper = prepare(notKey, key);
        Mockito.doCallRealMethod()
                .when(testSubject).setAutoGenerated(Mockito.anyMap());
        Map<String,Object> map = Collections.singletonMap("NAME2", "FAKE");
        Mockito.when(testSubject.getEntity())
                .thenReturn(new Object());
        Mockito.when(testSubject.getEntityMapper())
                .thenReturn(mapper);
        testSubject.setAutoGenerated(map);
        Mockito.verifyNoInteractions(notKey);
        Mockito.verify(key)
                .accept(Mockito.any(), Mockito.eq("FAKE"));
    }

    @Test
    void should_return_same_entity() {
        DelegatesMock.MyEntity entity = new DelegatesMock.MyEntity();
        Assertions.assertSame(entity, EntityDelegate.unboxEntity(entity));
    }

    @Test
    @SuppressWarnings("unchecked")
    void should_return_entity_from_delegate() {
        Object object = new Object();
        EntityDelegate<Object> delegate = Mockito.mock(EntityDelegate.class);
        Mockito.when(delegate.getEntity())
                .thenReturn(object);
        Assertions.assertSame(object, EntityDelegate.unboxEntity(delegate));
    }

    @SuppressWarnings("unchecked")
    private EntityMapper<Object> prepare(ColumnSetter<Object, Object> notKey, ColumnSetter<Object, Object> key) {
        ColumnGetter<Object, Object> getter = Mockito.mock(ColumnGetter.class);
        EntityMapper.Builder<Object> builder = new EntityMapper.Builder<>();
        builder.add("NAME1", String.class, notKey, getter, false, false);
        builder.add("NAME2", String.class, key, getter, true, true);
        return builder.build();
    }
}
